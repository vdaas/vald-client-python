# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from vald.v1.payload import payload_pb2 as vald_dot_v1_dot_payload_dot_payload__pb2


class SearchStub(object):
    """Overview
    Search Service is responsible for searching vectors similar to the user request vector from `vald-agent`.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Search = channel.unary_unary(
                '/vald.v1.Search/Search',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Request.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.FromString,
                _registered_method=True)
        self.SearchByID = channel.unary_unary(
                '/vald.v1.Search/SearchByID',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.IDRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.FromString,
                _registered_method=True)
        self.StreamSearch = channel.stream_stream(
                '/vald.v1.Search/StreamSearch',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Request.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.FromString,
                _registered_method=True)
        self.StreamSearchByID = channel.stream_stream(
                '/vald.v1.Search/StreamSearchByID',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.IDRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.FromString,
                _registered_method=True)
        self.MultiSearch = channel.unary_unary(
                '/vald.v1.Search/MultiSearch',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.FromString,
                _registered_method=True)
        self.MultiSearchByID = channel.unary_unary(
                '/vald.v1.Search/MultiSearchByID',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiIDRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.FromString,
                _registered_method=True)
        self.LinearSearch = channel.unary_unary(
                '/vald.v1.Search/LinearSearch',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Request.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.FromString,
                _registered_method=True)
        self.LinearSearchByID = channel.unary_unary(
                '/vald.v1.Search/LinearSearchByID',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.IDRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.FromString,
                _registered_method=True)
        self.StreamLinearSearch = channel.stream_stream(
                '/vald.v1.Search/StreamLinearSearch',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Request.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.FromString,
                _registered_method=True)
        self.StreamLinearSearchByID = channel.stream_stream(
                '/vald.v1.Search/StreamLinearSearchByID',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.IDRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.FromString,
                _registered_method=True)
        self.MultiLinearSearch = channel.unary_unary(
                '/vald.v1.Search/MultiLinearSearch',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.FromString,
                _registered_method=True)
        self.MultiLinearSearchByID = channel.unary_unary(
                '/vald.v1.Search/MultiLinearSearchByID',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiIDRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.FromString,
                _registered_method=True)


class SearchServicer(object):
    """Overview
    Search Service is responsible for searching vectors similar to the user request vector from `vald-agent`.
    """

    def Search(self, request, context):
        """Overview
        Search RPC is the method to search vector(s) similar to the request vector.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  5   | NOT_FOUND         |
        |  10  | ABORTED           |
        |  13  | INTERNAL          |
        ---
        Troubleshooting
        The request process may not be completed when the response code is NOT `0 (OK)`.

        Here are some common reasons and how to resolve each error.

        | name              | common reason                                                                                                   | how to resolve                                                                           |
        | :---------------- | :-------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
        | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                 | Check the code, especially around timeout and connection management, and fix if needed.  |
        | INVALID_ARGUMENT  | The Dimension of the request vector is NOT the same as Vald Agent's config, or some request payload is invalid. | Check Agent config, request payload, and fix request payload or Agent config.            |
        | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
        | NOT_FOUND         | Search result is empty or insufficient to request result length.                                                | Send a request with another vector or set min_num to a smaller value.                    |
        | INTERNAL          | Target Vald cluster or network route has some critical error.                                                   | Check target Vald cluster first and check network route including ingress as second.     |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchByID(self, request, context):
        """Overview
        SearchByID RPC is the method to search similar vectors using a user-defined vector ID.<br>
        The vector with the same requested ID should be indexed into the `vald-agent` before searching.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  5   | NOT_FOUND         |
        |  10  | ABORTED           |
        |  13  | INTERNAL          |
        ---
        Troubleshooting
        The request process may not be completed when the response code is NOT `0 (OK)`.

        Here are some common reasons and how to resolve each error.

        | name              | common reason                                                                                                                    | how to resolve                                                                           |
        | :---------------- | :------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
        | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                                  | Check the code, especially around timeout and connection management, and fix if needed.  |
        | INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                                                          | Check request payload and fix request payload.                                           |
        | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                                  | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
        | NOT_FOUND         | The Requested ID is not inserted on the target Vald cluster, or the search result is insufficient to the required result length. | Send a request with another vector or set min_num to a smaller value.                    |
        | INTERNAL          | Target Vald cluster or network route has some critical error.                                                                    | Check target Vald cluster first and check network route including ingress as second.     |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSearch(self, request_iterator, context):
        """Overview
        StreamSearch RPC is the method to search vectors with multi queries(vectors) using the [bidirectional streaming RPC](https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc).<br>
        Using the bidirectional streaming RPC, the search request can be communicated in any order between the client and server.
        Each Search request and response are independent.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  5   | NOT_FOUND         |
        |  10  | ABORTED           |
        |  13  | INTERNAL          |
        ---
        Troubleshooting
        The request process may not be completed when the response code is NOT `0 (OK)`.

        Here are some common reasons and how to resolve each error.

        | name              | common reason                                                                                                   | how to resolve                                                                           |
        | :---------------- | :-------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
        | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                 | Check the code, especially around timeout and connection management, and fix if needed.  |
        | INVALID_ARGUMENT  | The Dimension of the request vector is NOT the same as Vald Agent's config, or some request payload is invalid. | Check Agent config, request payload, and fix request payload or Agent config.            |
        | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
        | NOT_FOUND         | Search result is empty or insufficient to request result length.                                                | Send a request with another vector or set min_num to a smaller value.                    |
        | INTERNAL          | Target Vald cluster or network route has some critical error.                                                   | Check target Vald cluster first and check network route including ingress as second.     |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSearchByID(self, request_iterator, context):
        """Overview
        StreamSearchByID RPC is the method to search vectors with multi queries(IDs) using the [bidirectional streaming RPC](https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc).<br>
        Using the bidirectional streaming RPC, the search request can be communicated in any order between the client and server.
        Each SearchByID request and response are independent.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  5   | NOT_FOUND         |
        |  10  | ABORTED           |
        |  13  | INTERNAL          |
        ---
        Troubleshooting
        The request process may not be completed when the response code is NOT `0 (OK)`.

        Here are some common reasons and how to resolve each error.

        | name              | common reason                                                                                                                    | how to resolve                                                                           |
        | :---------------- | :------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
        | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                                  | Check the code, especially around timeout and connection management, and fix if needed.  |
        | INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                                                          | Check request payload and fix request payload.                                           |
        | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                                  | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
        | NOT_FOUND         | The Requested ID is not inserted on the target Vald cluster, or the search result is insufficient to the required result length. | Send a request with another vector or set min_num to a smaller value.                    |
        | INTERNAL          | Target Vald cluster or network route has some critical error.                                                                    | Check target Vald cluster first and check network route including ingress as second.     |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiSearch(self, request, context):
        """Overview
        MultiSearch RPC is the method to search vectors with multiple vectors in **1** request.

        <div class="notice">
        gRPC has a message size limitation.<br>
        Please be careful that the size of the request exceeds the limit.
        </div>
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  5   | NOT_FOUND         |
        |  10  | ABORTED           |
        |  13  | INTERNAL          |
        ---
        Troubleshooting
        The request process may not be completed when the response code is NOT `0 (OK)`.

        Here are some common reasons and how to resolve each error.

        | name              | common reason                                                                                                   | how to resolve                                                                           |
        | :---------------- | :-------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
        | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                 | Check the code, especially around timeout and connection management, and fix if needed.  |
        | INVALID_ARGUMENT  | The Dimension of the request vector is NOT the same as Vald Agent's config, or some request payload is invalid. | Check Agent config, request payload, and fix request payload or Agent config.            |
        | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
        | NOT_FOUND         | Search result is empty or insufficient to request result length.                                                | Send a request with another vector or set min_num to a smaller value.                    |
        | INTERNAL          | Target Vald cluster or network route has some critical error.                                                   | Check target Vald cluster first and check network route including ingress as second.     |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiSearchByID(self, request, context):
        """Overview
        MultiSearchByID RPC is the method to search vectors with multiple IDs in **1** request.

        <div class="notice">
        gRPC has a message size limitation.<br>
        Please be careful that the size of the request exceeds the limit.
        </div>
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  5   | NOT_FOUND         |
        |  10  | ABORTED           |
        |  13  | INTERNAL          |
        ---
        Troubleshooting
        The request process may not be completed when the response code is NOT `0 (OK)`.

        Here are some common reasons and how to resolve each error.

        | name              | common reason                                                                                                                    | how to resolve                                                                           |
        | :---------------- | :------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
        | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                                  | Check the code, especially around timeout and connection management, and fix if needed.  |
        | INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                                                          | Check request payload and fix request payload.                                           |
        | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                                  | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
        | NOT_FOUND         | The Requested ID is not inserted on the target Vald cluster, or the search result is insufficient to the required result length. | Send a request with another vector or set min_num to a smaller value.                    |
        | INTERNAL          | Target Vald cluster or network route has some critical error.                                                                    | Check target Vald cluster first and check network route including ingress as second.     |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LinearSearch(self, request, context):
        """Overview
        LinearSearch RPC is the method to linear search vector(s) similar to the request vector.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  5   | NOT_FOUND         |
        |  10  | ABORTED           |
        |  13  | INTERNAL          |
        ---
        Troubleshooting
        The request process may not be completed when the response code is NOT `0 (OK)`.

        Here are some common reasons and how to resolve each error.

        | name              | common reason                                                                                                   | how to resolve                                                                           |
        | :---------------- | :-------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
        | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                 | Check the code, especially around timeout and connection management, and fix if needed.  |
        | INVALID_ARGUMENT  | The Dimension of the request vector is NOT the same as Vald Agent's config, or some request payload is invalid. | Check Agent config, request payload, and fix request payload or Agent config.            |
        | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
        | NOT_FOUND         | Search result is empty or insufficient to request result length.                                                | Send a request with another vector or set min_num to a smaller value.                    |
        | INTERNAL          | Target Vald cluster or network route has some critical error.                                                   | Check target Vald cluster first and check network route including ingress as second.     |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LinearSearchByID(self, request, context):
        """Overview
        LinearSearchByID RPC is the method to linear search similar vectors using a user-defined vector ID.<br>
        The vector with the same requested ID should be indexed into the `vald-agent` before searching.
        You will get a `NOT_FOUND` error if the vector isn't stored.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  5   | NOT_FOUND         |
        |  10  | ABORTED           |
        |  13  | INTERNAL          |
        ---
        Troubleshooting
        The request process may not be completed when the response code is NOT `0 (OK)`.

        Here are some common reasons and how to resolve each error.

        | name              | common reason                                                                                                                    | how to resolve                                                                           |
        | :---------------- | :------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
        | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                                  | Check the code, especially around timeout and connection management, and fix if needed.  |
        | INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                                                          | Check request payload and fix request payload.                                           |
        | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                                  | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
        | NOT_FOUND         | The Requested ID is not inserted on the target Vald cluster, or the search result is insufficient to the required result length. | Send a request with another vector or set min_num to a smaller value.                    |
        | INTERNAL          | Target Vald cluster or network route has some critical error.                                                                    | Check target Vald cluster first and check network route including ingress as second.     |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLinearSearch(self, request_iterator, context):
        """Overview
        StreamLinearSearch RPC is the method to linear search vectors with multi queries(vectors) using the [bidirectional streaming RPC](https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc).<br>
        Using the bidirectional streaming RPC, the linear search request can be communicated in any order between the client and server.
        Each LinearSearch request and response are independent.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  5   | NOT_FOUND         |
        |  10  | ABORTED           |
        |  13  | INTERNAL          |
        ---
        Troubleshooting
        The request process may not be completed when the response code is NOT `0 (OK)`.

        Here are some common reasons and how to resolve each error.

        | name              | common reason                                                                                                   | how to resolve                                                                           |
        | :---------------- | :-------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
        | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                 | Check the code, especially around timeout and connection management, and fix if needed.  |
        | INVALID_ARGUMENT  | The Dimension of the request vector is NOT the same as Vald Agent's config, or some request payload is invalid. | Check Agent config, request payload, and fix request payload or Agent config.            |
        | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
        | NOT_FOUND         | Search result is empty or insufficient to request result length.                                                | Send a request with another vector or set min_num to a smaller value.                    |
        | INTERNAL          | Target Vald cluster or network route has some critical error.                                                   | Check target Vald cluster first and check network route including ingress as second.     |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamLinearSearchByID(self, request_iterator, context):
        """Overview
        StreamLinearSearchByID RPC is the method to linear search vectors with multi queries(IDs) using the [bidirectional streaming RPC](https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc).<br>
        Using the bidirectional streaming RPC, the linear search request can be communicated in any order between the client and server.
        Each LinearSearchByID request and response are independent.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  5   | NOT_FOUND         |
        |  10  | ABORTED           |
        |  13  | INTERNAL          |
        ---
        Troubleshooting
        The request process may not be completed when the response code is NOT `0 (OK)`.

        Here are some common reasons and how to resolve each error.

        | name              | common reason                                                                                                                    | how to resolve                                                                           |
        | :---------------- | :------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
        | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                                  | Check the code, especially around timeout and connection management, and fix if needed.  |
        | INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                                                          | Check request payload and fix request payload.                                           |
        | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                                  | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
        | NOT_FOUND         | The Requested ID is not inserted on the target Vald cluster, or the search result is insufficient to the required result length. | Send a request with another vector or set min_num to a smaller value.                    |
        | INTERNAL          | Target Vald cluster or network route has some critical error.                                                                    | Check target Vald cluster first and check network route including ingress as second.     |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiLinearSearch(self, request, context):
        """Overview
        MultiLinearSearch RPC is the method to linear search vectors with multiple vectors in **1** request.

        <div class="notice">
        gRPC has a message size limitation.<br>
        Please be careful that the size of the request exceeds the limit.
        </div>
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  5   | NOT_FOUND         |
        |  10  | ABORTED           |
        |  13  | INTERNAL          |
        ---
        Troubleshooting
        The request process may not be completed when the response code is NOT `0 (OK)`.

        Here are some common reasons and how to resolve each error.

        | name              | common reason                                                                                                   | how to resolve                                                                           |
        | :---------------- | :-------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
        | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                 | Check the code, especially around timeout and connection management, and fix if needed.  |
        | INVALID_ARGUMENT  | The Dimension of the request vector is NOT the same as Vald Agent's config, or some request payload is invalid. | Check Agent config, request payload, and fix request payload or Agent config.            |
        | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                 | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
        | NOT_FOUND         | Search result is empty or insufficient to request result length.                                                | Send a request with another vector or set min_num to a smaller value.                    |
        | INTERNAL          | Target Vald cluster or network route has some critical error.                                                   | Check target Vald cluster first and check network route including ingress as second.     |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiLinearSearchByID(self, request, context):
        """Overview
        MultiLinearSearchByID RPC is the method to linear search vectors with multiple IDs in **1** request.

        <div class="notice">
        gRPC has a message size limitation.<br>
        Please be careful that the size of the request exceeds the limit.
        </div>
        // ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  5   | NOT_FOUND         |
        |  10  | ABORTED           |
        |  13  | INTERNAL          |
        ---
        Troubleshooting
        The request process may not be completed when the response code is NOT `0 (OK)`.

        Here are some common reasons and how to resolve each error.

        | name              | common reason                                                                                                                    | how to resolve                                                                           |
        | :---------------- | :------------------------------------------------------------------------------------------------------------------------------- | :--------------------------------------------------------------------------------------- |
        | CANCELLED         | Executed cancel() of rpc from client/server-side or network problems between client and server.                                  | Check the code, especially around timeout and connection management, and fix if needed.  |
        | INVALID_ARGUMENT  | The Requested vector's ID is empty, or some request payload is invalid.                                                          | Check request payload and fix request payload.                                           |
        | DEADLINE_EXCEEDED | The RPC timeout setting is too short on the client/server side.                                                                  | Check the gRPC timeout setting on both the client and server sides and fix it if needed. |
        | NOT_FOUND         | The Requested ID is not inserted on the target Vald cluster, or the search result is insufficient to the required result length. | Send a request with another vector or set min_num to a smaller value.                    |
        | INTERNAL          | Target Vald cluster or network route has some critical error.                                                                    | Check target Vald cluster first and check network route including ingress as second.     |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SearchServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Search': grpc.unary_unary_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Request.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.SerializeToString,
            ),
            'SearchByID': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchByID,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.IDRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.SerializeToString,
            ),
            'StreamSearch': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamSearch,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Request.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.SerializeToString,
            ),
            'StreamSearchByID': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamSearchByID,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.IDRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.SerializeToString,
            ),
            'MultiSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.MultiSearch,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.SerializeToString,
            ),
            'MultiSearchByID': grpc.unary_unary_rpc_method_handler(
                    servicer.MultiSearchByID,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiIDRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.SerializeToString,
            ),
            'LinearSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.LinearSearch,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Request.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.SerializeToString,
            ),
            'LinearSearchByID': grpc.unary_unary_rpc_method_handler(
                    servicer.LinearSearchByID,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.IDRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.SerializeToString,
            ),
            'StreamLinearSearch': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamLinearSearch,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Request.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.SerializeToString,
            ),
            'StreamLinearSearchByID': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamLinearSearchByID,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.IDRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.SerializeToString,
            ),
            'MultiLinearSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.MultiLinearSearch,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.SerializeToString,
            ),
            'MultiLinearSearchByID': grpc.unary_unary_rpc_method_handler(
                    servicer.MultiLinearSearchByID,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiIDRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vald.v1.Search', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vald.v1.Search', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Search(object):
    """Overview
    Search Service is responsible for searching vectors similar to the user request vector from `vald-agent`.
    """

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Search/Search',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Request.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SearchByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Search/SearchByID',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.IDRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamSearch(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/vald.v1.Search/StreamSearch',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Request.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamSearchByID(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/vald.v1.Search/StreamSearchByID',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.IDRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MultiSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Search/MultiSearch',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MultiSearchByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Search/MultiSearchByID',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiIDRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LinearSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Search/LinearSearch',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Request.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LinearSearchByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Search/LinearSearchByID',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.IDRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamLinearSearch(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/vald.v1.Search/StreamLinearSearch',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Request.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamLinearSearchByID(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/vald.v1.Search/StreamLinearSearchByID',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.IDRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MultiLinearSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Search/MultiLinearSearch',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MultiLinearSearchByID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Search/MultiLinearSearchByID',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiIDRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
