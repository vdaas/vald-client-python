# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from vald.v1.payload import payload_pb2 as vald_dot_v1_dot_payload_dot_payload__pb2


class FilterStub(object):
    """Overview
    Filter Server is responsible for providing insert, update, upsert and search interface for `Vald Filter Gateway`.

    Vald Filter Gateway forward user request to user-defined ingress/egress filter components allowing user to run custom logic.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchObject = channel.unary_unary(
                '/vald.v1.Filter/SearchObject',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.ObjectRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.FromString,
                _registered_method=True)
        self.MultiSearchObject = channel.unary_unary(
                '/vald.v1.Filter/MultiSearchObject',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiObjectRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.FromString,
                _registered_method=True)
        self.StreamSearchObject = channel.stream_stream(
                '/vald.v1.Filter/StreamSearchObject',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.ObjectRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.FromString,
                _registered_method=True)
        self.InsertObject = channel.unary_unary(
                '/vald.v1.Filter/InsertObject',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Insert.ObjectRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.Location.FromString,
                _registered_method=True)
        self.StreamInsertObject = channel.stream_stream(
                '/vald.v1.Filter/StreamInsertObject',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Insert.ObjectRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.StreamLocation.FromString,
                _registered_method=True)
        self.MultiInsertObject = channel.unary_unary(
                '/vald.v1.Filter/MultiInsertObject',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Insert.MultiObjectRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.Locations.FromString,
                _registered_method=True)
        self.UpdateObject = channel.unary_unary(
                '/vald.v1.Filter/UpdateObject',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Update.ObjectRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.Location.FromString,
                _registered_method=True)
        self.StreamUpdateObject = channel.stream_stream(
                '/vald.v1.Filter/StreamUpdateObject',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Update.ObjectRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.StreamLocation.FromString,
                _registered_method=True)
        self.MultiUpdateObject = channel.unary_unary(
                '/vald.v1.Filter/MultiUpdateObject',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Update.MultiObjectRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.Locations.FromString,
                _registered_method=True)
        self.UpsertObject = channel.unary_unary(
                '/vald.v1.Filter/UpsertObject',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Upsert.ObjectRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.Location.FromString,
                _registered_method=True)
        self.StreamUpsertObject = channel.stream_stream(
                '/vald.v1.Filter/StreamUpsertObject',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Upsert.ObjectRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.StreamLocation.FromString,
                _registered_method=True)
        self.MultiUpsertObject = channel.unary_unary(
                '/vald.v1.Filter/MultiUpsertObject',
                request_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Upsert.MultiObjectRequest.SerializeToString,
                response_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.Locations.FromString,
                _registered_method=True)


class FilterServicer(object):
    """Overview
    Filter Server is responsible for providing insert, update, upsert and search interface for `Vald Filter Gateway`.

    Vald Filter Gateway forward user request to user-defined ingress/egress filter components allowing user to run custom logic.
    """

    def SearchObject(self, request, context):
        """Overview
        SearchObject RPC is the method to search object(s) similar to request object.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  6   | ALREADY_EXISTS    |
        |  13  | INTERNAL          |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiSearchObject(self, request, context):
        """Overview
        StreamSearchObject RPC is the method to search vectors with multi queries(objects) using the [bidirectional streaming RPC](https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc).<br>
        By using the bidirectional streaming RPC, the search request can be communicated in any order between client and server.
        Each Search request and response are independent.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  6   | ALREADY_EXISTS    |
        |  13  | INTERNAL          |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSearchObject(self, request_iterator, context):
        """Overview
        MultiSearchObject RPC is the method to search objects with multiple objects in **1** request.

        <div class="notice">
        gRPC has a message size limitation.<br>
        Please be careful that the size of the request exceeds the limit.
        </div>
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  6   | ALREADY_EXISTS    |
        |  13  | INTERNAL          |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InsertObject(self, request, context):
        """Overview
        InsertObject RPC is the method to insert object through Vald Filter Gateway.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  6   | ALREADY_EXISTS    |
        |  13  | INTERNAL          |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamInsertObject(self, request_iterator, context):
        """Overview
        StreamInsertObject RPC is the method to add new multiple object using the [bidirectional streaming RPC](https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc).

        By using the bidirectional streaming RPC, the insert request can be communicated in any order between client and server.
        Each Insert request and response are independent.
        It's the recommended method to insert a large number of objects.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  6   | ALREADY_EXISTS    |
        |  13  | INTERNAL          |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiInsertObject(self, request, context):
        """Overview
        MultiInsertObject RPC is the method to add multiple new objects in **1** request.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  6   | ALREADY_EXISTS    |
        |  13  | INTERNAL          |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateObject(self, request, context):
        """Overview
        UpdateObject RPC is the method to update a single vector.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  6   | ALREADY_EXISTS    |
        |  13  | INTERNAL          |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamUpdateObject(self, request_iterator, context):
        """Overview
        StreamUpdateObject RPC is the method to update multiple objects using the [bidirectional streaming RPC](https://grpc.io/docs/what-is-grpc/core-concepts/#bidirectional-streaming-rpc).<br>
        By using the bidirectional streaming RPC, the update request can be communicated in any order between client and server.
        Each Update request and response are independent.
        It's the recommended method to update the large amount of objects.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  6   | ALREADY_EXISTS    |
        |  13  | INTERNAL          |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiUpdateObject(self, request, context):
        """Overview
        MultiUpdateObject is the method to update multiple objects in **1** request.

        <div class="notice">
        gRPC has the message size limitation.<br>
        Please be careful that the size of the request exceed the limit.
        </div>
        ---
        Status Code

        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  6   | ALREADY_EXISTS    |
        |  13  | INTERNAL          |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertObject(self, request, context):
        """Overview
        UpsertObject RPC is the method to update a single object and add a new single object.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  6   | ALREADY_EXISTS    |
        |  13  | INTERNAL          |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamUpsertObject(self, request_iterator, context):
        """Overview
        UpsertObject RPC is the method to update a single object and add a new single object.
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  6   | ALREADY_EXISTS    |
        |  13  | INTERNAL          |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MultiUpsertObject(self, request, context):
        """Overview
        MultiUpsertObject is the method to update existing multiple objects and add new multiple objects in **1** request.

        <div class="notice">
        gRPC has a message size limitation.<br>
        Please be careful that the size of the request exceeds the limit.
        </div>
        ---
        Status Code
        |  0   | OK                |
        |  1   | CANCELLED         |
        |  3   | INVALID_ARGUMENT  |
        |  4   | DEADLINE_EXCEEDED |
        |  6   | ALREADY_EXISTS    |
        |  13  | INTERNAL          |
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FilterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchObject': grpc.unary_unary_rpc_method_handler(
                    servicer.SearchObject,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.ObjectRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.SerializeToString,
            ),
            'MultiSearchObject': grpc.unary_unary_rpc_method_handler(
                    servicer.MultiSearchObject,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiObjectRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.SerializeToString,
            ),
            'StreamSearchObject': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamSearchObject,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.ObjectRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.SerializeToString,
            ),
            'InsertObject': grpc.unary_unary_rpc_method_handler(
                    servicer.InsertObject,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Insert.ObjectRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.Location.SerializeToString,
            ),
            'StreamInsertObject': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamInsertObject,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Insert.ObjectRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.StreamLocation.SerializeToString,
            ),
            'MultiInsertObject': grpc.unary_unary_rpc_method_handler(
                    servicer.MultiInsertObject,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Insert.MultiObjectRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.Locations.SerializeToString,
            ),
            'UpdateObject': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateObject,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Update.ObjectRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.Location.SerializeToString,
            ),
            'StreamUpdateObject': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamUpdateObject,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Update.ObjectRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.StreamLocation.SerializeToString,
            ),
            'MultiUpdateObject': grpc.unary_unary_rpc_method_handler(
                    servicer.MultiUpdateObject,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Update.MultiObjectRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.Locations.SerializeToString,
            ),
            'UpsertObject': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertObject,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Upsert.ObjectRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.Location.SerializeToString,
            ),
            'StreamUpsertObject': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamUpsertObject,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Upsert.ObjectRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.StreamLocation.SerializeToString,
            ),
            'MultiUpsertObject': grpc.unary_unary_rpc_method_handler(
                    servicer.MultiUpsertObject,
                    request_deserializer=vald_dot_v1_dot_payload_dot_payload__pb2.Upsert.MultiObjectRequest.FromString,
                    response_serializer=vald_dot_v1_dot_payload_dot_payload__pb2.Object.Locations.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vald.v1.Filter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vald.v1.Filter', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Filter(object):
    """Overview
    Filter Server is responsible for providing insert, update, upsert and search interface for `Vald Filter Gateway`.

    Vald Filter Gateway forward user request to user-defined ingress/egress filter components allowing user to run custom logic.
    """

    @staticmethod
    def SearchObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Filter/SearchObject',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.ObjectRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MultiSearchObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Filter/MultiSearchObject',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.MultiObjectRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.Responses.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamSearchObject(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/vald.v1.Filter/StreamSearchObject',
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.ObjectRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Search.StreamResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InsertObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Filter/InsertObject',
            vald_dot_v1_dot_payload_dot_payload__pb2.Insert.ObjectRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Object.Location.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamInsertObject(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/vald.v1.Filter/StreamInsertObject',
            vald_dot_v1_dot_payload_dot_payload__pb2.Insert.ObjectRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Object.StreamLocation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MultiInsertObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Filter/MultiInsertObject',
            vald_dot_v1_dot_payload_dot_payload__pb2.Insert.MultiObjectRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Object.Locations.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Filter/UpdateObject',
            vald_dot_v1_dot_payload_dot_payload__pb2.Update.ObjectRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Object.Location.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamUpdateObject(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/vald.v1.Filter/StreamUpdateObject',
            vald_dot_v1_dot_payload_dot_payload__pb2.Update.ObjectRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Object.StreamLocation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MultiUpdateObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Filter/MultiUpdateObject',
            vald_dot_v1_dot_payload_dot_payload__pb2.Update.MultiObjectRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Object.Locations.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpsertObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Filter/UpsertObject',
            vald_dot_v1_dot_payload_dot_payload__pb2.Upsert.ObjectRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Object.Location.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamUpsertObject(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/vald.v1.Filter/StreamUpsertObject',
            vald_dot_v1_dot_payload_dot_payload__pb2.Upsert.ObjectRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Object.StreamLocation.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def MultiUpsertObject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vald.v1.Filter/MultiUpsertObject',
            vald_dot_v1_dot_payload_dot_payload__pb2.Upsert.MultiObjectRequest.SerializeToString,
            vald_dot_v1_dot_payload_dot_payload__pb2.Object.Locations.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
